{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "03224882_d9bcf81c",
        "filename": "Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 597,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2022-02-03T17:44:01Z",
      "side": 1,
      "message": "Is it worth splitting out separate bindings for libcrypto and libssl, so that apps not using libssl don\u0027t pay the overhead?",
      "range": {
        "startLine": 597,
        "startChar": 11,
        "endLine": 597,
        "endChar": 30
      },
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59dde5f5_f6f3aa5b",
        "filename": "Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 597,
      "author": {
        "id": 1836235
      },
      "writtenOn": "2022-02-03T18:40:00Z",
      "side": 1,
      "message": "I\u0027m probably expecting that users will not use bssl_sys directly, but instead will use the openssl crate, adapted to use bssl_sys as its ffi layer.  If that\u0027s the case, then the granularity here should match what openssl expects -- I\u0027ll investigate.",
      "parentUuid": "03224882_d9bcf81c",
      "range": {
        "startLine": 597,
        "startChar": 11,
        "endLine": 597,
        "endChar": 30
      },
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55faf5da_63d97dad",
        "filename": "Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 597,
      "author": {
        "id": 1836235
      },
      "writtenOn": "2022-02-08T19:26:56Z",
      "side": 1,
      "message": "The Rust `openssl` crate doesn\u0027t appear to have any separation between functionality provided by libcrypto vs libssl, so dividing things up wouldn\u0027t make a difference for anyone access this lower-level stuff via that crate.\n\nSo if we don\u0027t expect much direct use of the low-level `bssl_sys` bindings, then I don\u0027t think splitting is worthwhile.\n\nThoughts?",
      "parentUuid": "59dde5f5_f6f3aa5b",
      "range": {
        "startLine": 597,
        "startChar": 11,
        "endLine": 597,
        "endChar": 30
      },
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e6f646de_845fb820",
        "filename": "Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 597,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-02-08T22:23:11Z",
      "side": 1,
      "message": "I think we should just keep them merged for now. If someone ends up using only part of it later, we can split them apart.",
      "parentUuid": "55faf5da_63d97dad",
      "range": {
        "startLine": 597,
        "startChar": 11,
        "endLine": 597,
        "endChar": 30
      },
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "4b20a53b_62096c37",
        "filename": "Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 597,
      "author": {
        "id": 1836235
      },
      "writtenOn": "2022-02-10T07:24:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "e6f646de_845fb820",
      "range": {
        "startLine": 597,
        "startChar": 11,
        "endLine": 597,
        "endChar": 30
      },
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2c993c52_d17fb64a",
        "filename": "Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 640,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2022-02-03T17:44:01Z",
      "side": 1,
      "message": "Please add a TODO with a bugid.  And most of the detail can go in the bug :)",
      "range": {
        "startLine": 640,
        "startChar": 11,
        "endLine": 640,
        "endChar": 37
      },
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "5ef14f27_923abf83",
        "filename": "Android.bp",
        "patchSetId": 3
      },
      "lineNbr": 640,
      "author": {
        "id": 1836235
      },
      "writtenOn": "2022-02-03T18:40:00Z",
      "side": 1,
      "message": "Re-united the two halves of the comment to make the existing TODO clearer (although I\u0027ve not yet updated the bug with any details).",
      "parentUuid": "2c993c52_d17fb64a",
      "range": {
        "startLine": 640,
        "startChar": 11,
        "endLine": 640,
        "endChar": 37
      },
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9b28eadc_bdb2531e",
        "filename": "rust/bssl_sys.rs",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1416371
      },
      "writtenOn": "2022-02-03T17:26:26Z",
      "side": 1,
      "message": "Nit: Can you include a pointer to rust/src/lib.rs where you instantiated this from? It\u0027d be good to know that this file isn\u0027t standalone in the event that it needs to be updated.\n\nThis is effectively generated code, but it\u0027d be overkill to switch to a cmake-based build just to generate this one file.",
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "e7843a9d_2fcc8f6e",
        "filename": "rust/bssl_sys.rs",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2022-02-03T18:13:57Z",
      "side": 1,
      "message": "Oh yuck. This had not occurred to me when reviewing bwb\u0027s original CL. Agreed you all shouldn\u0027t switch to CMake, but this also means this bssl-sys story should change a bit.\n\nWe should either automate generating this file (generate_build_files.py), or rearrange things so that the bulk of it (the ERR_GET_LIB wrappers) are part of static BoringSSL source.\n\nI\u0027m not very familiar with Rust. Can someone from the Android Rust team own this?",
      "parentUuid": "9b28eadc_bdb2531e",
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2660977e_e7f2de73",
        "filename": "rust/bssl_sys.rs",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1334152
      },
      "writtenOn": "2022-02-03T18:24:03Z",
      "side": 1,
      "message": "If you do start generating these via generate_build_files.py, then let\u0027s move them to src/rust too.",
      "parentUuid": "e7843a9d_2fcc8f6e",
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b814a3da_eeb70b13",
        "filename": "rust/bssl_sys.rs",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1031048
      },
      "writtenOn": "2022-02-03T18:29:49Z",
      "side": 1,
      "message": "I\u0027m actually wondering whether Rust provides enough rope to avoid needing to pregenerate it. This file is completely static except for an include!(...) line.\n\nSurely we could just generate a single include! line that\u0027s good for everyone (this one\u0027s env-parameterized), or maybe just use Rust\u0027s modules mechanism? (I\u0027m handwaiving a bit because I don\u0027t know what Rust provides.)",
      "parentUuid": "2660977e_e7f2de73",
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d00ba848_50b58c17",
        "filename": "rust/bssl_sys.rs",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1836235
      },
      "writtenOn": "2022-02-03T18:40:00Z",
      "side": 1,
      "message": "\u003e Surely we could just generate a single include! line that\u0027s good for everyone \n\nYeah, I suspect that\u0027s possible with a bit of build.rs hackery -- I think I\u0027ve even got an experiment along those lines (git) stashed somewhere...",
      "parentUuid": "9b28eadc_bdb2531e",
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "9efc82b0_b6cfbbb7",
        "filename": "rust/bssl_sys.rs",
        "patchSetId": 3
      },
      "lineNbr": 0,
      "author": {
        "id": 1836235
      },
      "writtenOn": "2022-02-04T14:57:38Z",
      "side": 1,
      "message": "I found some Android.bp hackery that appears to do the trick.\n\nSeparately, I\u0027ll send a CL upstream to BoringSSL that improves docs and tests; once that\u0027s in and imported, we can add another rust_test target here.",
      "parentUuid": "d00ba848_50b58c17",
      "revId": "7f7eb2751df4fb3ef66528a553a5f474df72c0c8",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}