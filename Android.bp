// Note that some host libraries have the same module name as the target
// libraries. This is currently needed to build, for example, adb. But it's
// probably something that should be changed.

package {
    default_visibility: ["//visibility:private"],
    default_applicable_licenses: ["external_boringssl_license"],
}

// Added automatically by a large-scale-change that took the approach of
// 'apply every license found to every target'. While this makes sure we respect
// every license restriction, it may not be entirely correct.
//
// e.g. GPL in an MIT project might only apply to the contrib/ directory.
//
// Please consider splitting the single license below into multiple licenses,
// taking care not to lose any license_kind information, and overriding the
// default license using the 'licenses: [...]' property on targets as needed.
//
// For unused files, consider creating a 'fileGroup' with "//visibility:private"
// to attach the license to, and including a comment whether the files may be
// used in the current project.
// See: http://go/android-license-faq
license {
    name: "external_boringssl_license",
    visibility: [":__subpackages__"],
    license_kinds: [
        "SPDX-license-identifier-Apache-2.0",
        "SPDX-license-identifier-BSD",
        "SPDX-license-identifier-ISC",
        "SPDX-license-identifier-MIT",
        "SPDX-license-identifier-OpenSSL",
        "legacy_unencumbered",
    ],
    license_text: [
        "NOTICE",
    ],
}

// Pull in the autogenerated sources modules
build = ["sources.bp"]

// Used by libcrypto, libssl, bssl tool, and native tests
cc_defaults {
    // This contains the common options between boringssl_flags and
    // boringssl_flags_baremetal. Nothing else should include this target
    // directly.
    name: "boringssl_flags_common",

    cflags: [
        "-fvisibility=hidden",
        "-DBORINGSSL_SHARED_LIBRARY",
        "-DOPENSSL_SMALL",
        "-Werror",
        "-Wno-unused-parameter",
    ],

    cppflags: [
        "-Wall",
        "-Werror",
    ],

    // Build BoringSSL and its tests against the same STL.
    stl: "libc++_static",
}

cc_defaults {
    name: "boringssl_flags",
    vendor_available: true,
    product_available: true,
    cflags: ["-DBORINGSSL_ANDROID_SYSTEM"],
    defaults: ["boringssl_flags_common"],
    sdk_version: "9",
}

cc_defaults {
    name: "boringssl_flags_baremetal",
    cflags: [
        "-DBORINGSSL_NO_STATIC_INITIALIZER",
        "-DANDROID_BAREMETAL",
    ],
    defaults: ["boringssl_flags_common"],
    apex_available: [
        "com.android.virt",
    ],
}

// Used by libcrypto + libssl
cc_defaults {
    name: "boringssl_defaults",

    local_include_dirs: ["src/include"],
    export_include_dirs: ["src/include"],
    cflags: ["-DBORINGSSL_IMPLEMENTATION"],

    cmake_snapshot_supported: true,
}

//// libcrypto, but not libcrypto_baremetal. libcrypto_baremetal is a single
//// target, so there is no need for a libcrypto_defaults_baremetal.
cc_defaults {
    name: "libcrypto_defaults",
    host_supported: true,
    ramdisk_available: true,
    vendor_ramdisk_available: true,

    target: {
        windows: {
            enabled: true,
            host_ldlibs: ["-lws2_32"],
        },
        host: {
            host_ldlibs: ["-lpthread"],
        },
        android: {
            // On FIPS builds (i.e. Android only) prevent other libraries
            // from pre-empting symbols in libcrypto which could affect FIPS
            // compliance and cause integrity checks to fail. See b/160231064.
            ldflags: ["-Wl,-Bsymbolic"],
        },
    },

    stl: "none",
}

// Boring Crypto Module object file.
// Common settings between bcm_object and bcm_object_for_testing.
cc_defaults {
    name: "bcm_object_defaults",
    device_supported: true,
    defaults: [
        "libcrypto_bcm_sources",
        "libcrypto_defaults",
        "boringssl_defaults",
        "boringssl_flags",
    ],
    sanitize: {
        address: false,
        hwaddress: false,
        memtag_stack: false,
        memtag_globals: false,
        fuzzer: false,
    },
    target: {
        android: {
            cflags: [
                "-DBORINGSSL_FIPS",
                "-fPIC",
                // -fno[data|text]-sections required to ensure a
                // single text and data section for FIPS integrity check
                "-fno-data-sections",
                "-fno-function-sections",
            ],
            linker_script: "src/crypto/fipsmodule/fips_shared.lds",
        },
        // Temporary hack to let BoringSSL build with a new compiler.
        // This doesn't enable HWASAN unconditionally, it just causes
        // BoringSSL's asm code to unconditionally use a HWASAN-compatible
        // global variable reference so that the non-HWASANified (because of
        // sanitize: { hwaddress: false } above) code in the BCM can
        // successfully link against the HWASANified code in the rest of
        // BoringSSL in HWASAN builds.
        android_arm64: {
            asflags: [
                "-fsanitize=hwaddress",
            ],
        },
    },
    min_sdk_version: "29",
}

cc_object {
    name: "bcm_object",
    recovery_available: true,
    native_bridge_supported: true,
    defaults: [
        "bcm_object_defaults",
    ],
    apex_available: [
        "//apex_available:platform",
        "com.android.adbd",
        "com.android.adservices",
        "com.android.btservices",
        "com.android.compos",
        "com.android.conscrypt",
        "com.android.extservices",
        "com.android.ondevicepersonalization",
        "com.android.resolv",
        "com.android.virt",
    ],
}

// Version of bcm_object built with BORINGSSL_FIPS_BREAK_TESTS defined.
// Only for use with the FIPS break-tests.sh script.
cc_object {
    name: "bcm_object_for_testing",
    visibility: [
        "//external/boringssl",
    ],
    defaults: [
        "bcm_object_defaults",
    ],
    target: {
        android: {
            cflags: ["-DBORINGSSL_FIPS_BREAK_TESTS"],
        },
    },
}

bootstrap_go_package {
    name: "bssl_ar",
    pkgPath: "boringssl.googlesource.com/boringssl/util/ar",
    srcs: [
        "src/util/ar/ar.go",
    ],
    testSrcs: [
        "src/util/ar/ar_test.go",
    ],
}

bootstrap_go_package {
    name: "bssl_fipscommon",
    pkgPath: "boringssl.googlesource.com/boringssl/util/fipstools/fipscommon",
    srcs: [
        "src/util/fipstools/fipscommon/const.go",
    ],
}

blueprint_go_binary {
    name: "bssl_inject_hash",
    srcs: [
        "src/util/fipstools/inject_hash/inject_hash.go",
    ],
    deps: [
        "bssl_ar",
        "bssl_fipscommon",
    ],
}

// Target and host library.
// Any changes here must also be reflected in libcrypto_for_test below.
cc_library {
    name: "libcrypto",
    visibility: ["//visibility:public"],
    vendor_available: true,
    product_available: true,
    native_bridge_supported: true,
    double_loadable: true,
    recovery_available: true,
    defaults: [
        "libcrypto_sources",
        "libcrypto_defaults",
        "boringssl_defaults",
        "boringssl_flags",
    ],
    unique_host_soname: true,
    srcs: [
        ":bcm_object",
    ],
    target: {
        android: {
            cflags: [
                "-DBORINGSSL_FIPS",
            ],
            sanitize: {
                // Disable address sanitizing otherwise libcrypto will not report
                // itself as being in FIPS mode, which causes boringssl_self_test
                // to fail.
                address: false,
            },
            inject_bssl_hash: true,
            static: {
                // Disable the static version of libcrypto, as it causes
                // problems for FIPS certification.  Use libcrypto_static for
                // modules that need static libcrypto but do not need FIPS self
                // testing, or use dynamic libcrypto.
                enabled: false,
            },
        },
    },
    apex_available: [
        "//apex_available:platform",
        "com.android.adbd",
        "com.android.adservices",
        "com.android.btservices",
        "com.android.compos",
        "com.android.conscrypt",
        "com.android.extservices",
        "com.android.resolv",
        "com.android.ondevicepersonalization",
        "com.android.virt",
    ],
    min_sdk_version: "29",
    afdo: true,
}

// Version of libcrypto build with BORINGSSL_FIPS_BREAK_TESTS defined
// Only for use with the FIPS break-tests.sh script.
// Must be kept in sync with libcrypto.
cc_library {
    name: "libcrypto_for_testing",
    visibility: [
        "//external/boringssl",
    ],
    defaults: [
        "libcrypto_sources",
        "libcrypto_defaults",
        "boringssl_defaults",
        "boringssl_flags",
    ],
    unique_host_soname: true,
    srcs: [
        ":bcm_object_for_testing",
    ],
    target: {
        android: {
            cflags: [
                "-DBORINGSSL_FIPS",
                "-DBORINGSSL_FIPS_BREAK_TESTS",
            ],
            sanitize: {
                // Disable address sanitizing otherwise libcrypto will not report
                // itself as being in FIPS mode, which causes boringssl_self_test
                // to fail.
                address: false,
            },
            inject_bssl_hash: true,
            static: {
                // Disable the static version of libcrypto, as it causes
                // problems for FIPS certification.  Use libcrypto_static for
                // modules that need static libcrypto but do not need FIPS self
                // testing, or use dynamic libcrypto.
                enabled: false,
            },
        },
    },
    min_sdk_version: "29",
}

// Static library
// This version of libcrypto will not have FIPS self tests enabled, so its
// usage is protected through visibility to ensure it doesn't end up used
// somewhere that needs the FIPS version.
cc_library_static {
    name: "libcrypto_static",
    visibility: [
        "//bootable/recovery/updater",
        "//bootable/deprecated-ota/updater",
        "//external/conscrypt",
        "//external/python/cpython2",
        "//external/rust/crates/quiche",
        // Strictly, only the *static* toybox for legacy devices should have
        // access to libcrypto_static, but we can't express that.
        "//external/toybox",
        "//hardware/interfaces/confirmationui/1.0/vts/functional",
        "//hardware/interfaces/drm/1.0/vts/functional",
        "//hardware/interfaces/drm/1.2/vts/functional",
        "//hardware/interfaces/drm/1.3/vts/functional",
        "//hardware/interfaces/keymaster/3.0/vts/functional",
        "//hardware/interfaces/keymaster/4.0/vts/functional",
        "//hardware/interfaces/keymaster/4.1/vts/functional",
        "//packages/modules/adb",
        "//packages/modules/AdServices:__subpackages__",
        "//packages/modules/DnsResolver/tests:__subpackages__",
        "//packages/modules/NeuralNetworks:__subpackages__",
        "//system/core/init",
        "//system/core/fs_mgr/liblp",
        "//system/core/fs_mgr/liblp/vts_core",
        "//system/core/fs_mgr/libsnapshot",
        "//system/libvintf/test",
        "//system/security/keystore/tests",
        "//system/security/provisioner",
        "//test/vts-testcase/security/avb",
        "//vendor:__subpackages__",
    ],
    min_sdk_version: "29",
    apex_available: [
        "//apex_available:platform",
        "com.android.adservices",
        "com.android.extservices",
        "com.android.neuralnetworks",
    ],
    defaults: [
        "libcrypto_bcm_sources",
        "libcrypto_sources",
        "libcrypto_defaults",
        "boringssl_defaults",
        "boringssl_flags",
    ],
}

// Static library for use in bare-metal environments
cc_library_static {
    name: "libcrypto_baremetal",
    defaults: [
        "libcrypto_bcm_sources",
        "libcrypto_sources",
        "boringssl_defaults",
        "boringssl_flags_baremetal",
    ],
    visibility: [
        "//external/avb:__subpackages__",
        "//external/open-dice",
        "//packages/modules/Virtualization:__subpackages__",
        "//system/security/diced/open_dice",
    ],

    // b/336916369: This library gets linked into a rust rlib.  Disable LTO
    // until cross-language lto is supported.
    lto: {
        never: true,
    },
}

// For static linking into the ART module to provide limited functionality:
// bignums and SHA1 for ELF checksums.
cc_library_static {
    name: "libcrypto_for_art",
    defaults: [
        "libcrypto_defaults",
        "boringssl_defaults",
    ],
    srcs: [
        "src/crypto/cpu_*.c",
        "src/crypto/crypto.c",
        "src/crypto/err/err.c",
        "src/crypto/fipsmodule/bn/*.c",
        "src/crypto/fipsmodule/bn/asm/*.c",
        "src/crypto/fipsmodule/rand/*.c",
        "src/crypto/fipsmodule/sha/sha1.c",
        "src/crypto/mem.c",
        "src/crypto/stack/stack.c",
        "src/crypto/thread_pthread.c",
        "src/gen/crypto/err_data.c",
    ],
    target: {
        linux: {
            srcs: [
                "src/gen/bcm/*-linux.S",
            ],
        },
    },
    visibility: [
        "//art:__subpackages__",
        "//libcore:__subpackages__",
    ],
    apex_available: [
        "com.android.art",
        "com.android.art.debug",
        "com.android.art.testing",
    ],
    min_sdk_version: "29",
}

// Common defaults for lib*_fuzz_unsafe. These are unsafe and deterministic
// libraries for testing and fuzzing only. See src/FUZZING.md.
cc_defaults {
    name: "boringssl_fuzz_unsafe_defaults",
    host_supported: true,
    cflags: [
        "-DBORINGSSL_UNSAFE_DETERMINISTIC_MODE",
        "-DBORINGSSL_UNSAFE_FUZZER_MODE",
    ],
    visibility: [
        "//frameworks/native/libs/binder/tests:__subpackages__",
    ],
}

// Unsafe and deterministic version of libcrypto. For testing and fuzzing only.
// See src/FUZZING.md.
cc_test_library {
    name: "libcrypto_fuzz_unsafe",
    ramdisk_available: false,
    vendor_ramdisk_available: false,
    defaults: [
        "libcrypto_bcm_sources",
        "libcrypto_sources",
        "libcrypto_defaults",
        "boringssl_defaults",
        "boringssl_flags",
        "boringssl_fuzz_unsafe_defaults",
    ],
}

//// libssl

// Target static library

// Static and Shared library
cc_library {
    name: "libssl",
    visibility: ["//visibility:public"],
    recovery_available: true,
    vendor_available: true,
    product_available: true,
    native_bridge_supported: true,
    host_supported: true,
    defaults: [
        "libssl_sources",
        "boringssl_defaults",
        "boringssl_flags",
    ],
    target: {
        windows: {
            enabled: true,
        },
    },
    unique_host_soname: true,

    shared_libs: ["libcrypto"],

    apex_available: [
        "//apex_available:platform",
        "com.android.btservices",
        "com.android.adbd",
        "com.android.conscrypt",
        "com.android.resolv",
        "com.android.virt",
    ],
    min_sdk_version: "29",
}

cc_library_static {
    name: "libssl_baremetal",
    defaults: [
        "libssl_sources",
        "boringssl_defaults",
        "boringssl_flags_baremetal",
    ],
    static_libs: ["libcrypto_baremetal"],
}

cc_library_host_static {
    name: "libssl_static",
    defaults: [
        "libssl_sources",
        "boringssl_defaults",
        "boringssl_flags",
    ],
    static_libs: ["libcrypto_static"],
}

// Unsafe and deterministic version of libssl. For testing and fuzzing only.
// See src/FUZZING.md.
cc_test_library {
    name: "libssl_fuzz_unsafe",
    host_supported: true,
    defaults: [
        "libssl_sources",
        "boringssl_defaults",
        "boringssl_flags",
        "boringssl_fuzz_unsafe_defaults",
    ],
    static_libs: [
        "libcrypto_fuzz_unsafe",
    ],
}

// Tool
cc_binary {
    name: "bssl",
    host_supported: true,
    defaults: [
        "bssl_sources",
        "boringssl_flags",
    ],

    shared_libs: [
        "libcrypto",
        "libssl",
    ],
    target: {
        darwin: {
            enabled: false,
        },
        android: {
            compile_multilib: "both",
        },
    },
    multilib: {
        lib32: {
            suffix: "32",
        },
    },
}

// Used for ACVP testing for FIPS certification.
// Not installed on devices by default.
cc_binary {
    name: "acvp_modulewrapper",
    srcs: [
        "src/util/fipstools/acvp/modulewrapper/main.cc",
    ],
    target: {
        android_x86: {
            enabled: false,
        },
        android_x86_64: {
            enabled: false,
        },
    },
    stem: "modulewrapper",
    compile_multilib: "both",
    multilib: {
        lib32: {
            suffix: "32",
        },
    },

    static_libs: [
        "libacvp_modulewrapper",
    ],
    shared_libs: [
        "libcrypto",
    ],

    defaults: [
        "boringssl_flags",
    ],
}

// ACVP wrapper implementation shared between Android and Trusty
cc_library_static {
    name: "libacvp_modulewrapper",
    host_supported: true,
    vendor_available: true,
    srcs: [
        "src/util/fipstools/acvp/modulewrapper/modulewrapper.cc",
    ],
    target: {
        android: {
            compile_multilib: "both",
        },
    },
    export_include_dirs: ["src/util/fipstools/acvp/modulewrapper/"],
    shared_libs: [
        "libcrypto",
    ],

    defaults: [
        "boringssl_flags",
    ],

    visibility: ["//system/core/trusty/utils/acvp"],
}

// Test support library
cc_test_library {
    name: "boringssl_test_support",
    host_supported: true,
    defaults: [
        "boringssl_test_support_sources",
        "boringssl_flags",
    ],

    shared_libs: [
        "libcrypto",
    ],
}

// Tests
cc_test {
    name: "boringssl_crypto_test",
    test_config: "CryptoNativeTests.xml",
    test_suites: ["general-tests"],
    host_supported: false,
    vendor_available: false,
    product_available: false,
    per_testcase_directory: true,
    compile_multilib: "both",
    multilib: {
        lib32: {
            suffix: "32",
        },
        lib64: {
            suffix: "64",
        },
    },
    defaults: [
        "boringssl_crypto_test_sources",
        "boringssl_flags",
    ],
    whole_static_libs: ["boringssl_test_support"],
    // Statically link the library to test to ensure we always pick up the
    // correct version regardless of device linker configuration.
    static_libs: [
        "libcrypto_static",
        "libgmock_ndk",
    ],
    target: {
        android: {
            test_suites: ["mts-conscrypt"],
        },
    },
}

cc_test {
    name: "boringssl_ssl_test",
    test_config: "SslNativeTests.xml",
    test_suites: ["general-tests"],
    host_supported: false,
    vendor_available: false,
    product_available: false,
    per_testcase_directory: true,
    compile_multilib: "both",
    multilib: {
        lib32: {
            suffix: "32",
        },
        lib64: {
            suffix: "64",
        },
    },
    defaults: [
        "boringssl_ssl_test_sources",
        "boringssl_flags",
    ],
    whole_static_libs: ["boringssl_test_support"],
    // Statically link the libraries to test to ensure we always pick up the
    // correct version regardless of device linker configuration.
    static_libs: [
        "libcrypto_static",
        "libgmock_ndk",
        "libssl",
    ],
    target: {
        android: {
            test_suites: ["mts-conscrypt"],
        },
    },
}

// Utility binary for CMVP on-site testing.
cc_binary {
    name: "test_fips",
    host_supported: false,
    compile_multilib: "both",
    multilib: {
        lib32: {
            suffix: "32",
        },
        lib64: {
            suffix: "",
        },
    },
    defaults: [
        "boringssl_flags",
    ],
    shared_libs: [
        "libcrypto",
    ],
    srcs: [
        "src/util/fipstools/test_fips.c",
    ],
    required: [
        "adb",
        "libcrypto_for_testing",
    ],
}

libbssl_sys_raw_flags = [
    // Adapted from upstream the src/rust/CMakeLists.txt file at:
    // https://boringssl.googlesource.com/boringssl/+/refs/heads/master/rust/CMakeLists.txt
    "--no-derive-default",
    "--enable-function-attribute-detection",
    "--use-core",
    "--default-macro-constant-type=signed",
    "--rustified-enum=point_conversion_form_t",
    // These regexes use [[:punct:]] instead of / to handle Windows file paths.
    // Ideally we would write [/\\], but escaping rules are complex, and often
    // ill-defined, in some build systems, so align on [[:punct:]].
    "--allowlist-file=.*[[:punct:]]include[[:punct:]]openssl[[:punct:]].*\\.h",
    "--allowlist-file=.*[[:punct:]]rust_wrapper\\.h",
]

// Rust bindings
rust_bindgen {
    name: "libbssl_sys_raw",
    source_stem: "bssl_sys_bindings",
    crate_name: "bssl_sys_raw",
    host_supported: true,
    wrapper_src: "src/rust/bssl-sys/wrapper.h",
    vendor_available: true,
    product_available: true,
    bindgen_flags: libbssl_sys_raw_flags,
    shared_libs: [
        "libcrypto",
        "libssl",
    ],
    apex_available: [
        "//apex_available:platform",
        "com.android.virt",
    ],
}

rust_bindgen {
    name: "libbssl_sys_raw_nostd",
    source_stem: "bssl_sys_bindings",
    crate_name: "bssl_sys_raw",
    wrapper_src: "src/rust/bssl-sys/wrapper.h",
    bindgen_flags: [
        "--ctypes-prefix=core::ffi",
    ] + libbssl_sys_raw_flags,
    header_libs: [
        "libcrypto_baremetal",
        "libssl_baremetal",
    ],
    apex_available: [
        "com.android.virt",
    ],
}

// Encapsulate the bindgen-generated layout tests as a test target.
rust_test {
    name: "libbssl_sys_raw_test",
    srcs: [
        ":libbssl_sys_raw",
    ],
    crate_name: "bssl_sys_raw_test",
    test_suites: ["general-tests"],
    auto_gen_config: true,
    clippy_lints: "none",
    lints: "none",
}

// Rust's bindgen doesn't cope with macros, so this target includes C functions that
// do the same thing as macros defined in BoringSSL header files.
cc_library_static {
    name: "libbssl_rust_support",
    host_supported: true,
    defaults: ["boringssl_flags"],
    srcs: ["src/rust/bssl-sys/rust_wrapper.c"],
    shared_libs: [
        "libcrypto",
        "libssl",
    ],
    apex_available: [
        "//apex_available:platform",
        "com.android.virt",
    ],

    // b/336916369: This library gets linked into a rust rlib.  Disable LTO
    // until cross-language lto is supported.
    lto: {
        never: true,
    },
}

cc_library_static {
    name: "libbssl_rust_support_baremetal",
    defaults: ["boringssl_flags_baremetal"],
    srcs: ["src/rust/bssl-sys/rust_wrapper.c"],
    static_libs: [
        "libcrypto_baremetal",
        "libssl_baremetal",
    ],

    // b/336916369: This library gets linked into a rust rlib.  Disable LTO
    // until cross-language lto is supported.
    lto: {
        never: true,
    },
}

cc_library_host_static {
    name: "libbssl_rust_support_static",
    defaults: ["boringssl_flags"],
    srcs: ["src/rust/bssl-sys/rust_wrapper.c"],
    whole_static_libs: [
        "libcrypto_static",
        "libssl_static",
    ],
}

rust_defaults {
    name: "libbssl_sys_defaults",
    host_supported: true,
    crate_name: "bssl_sys",
    visibility: [
        "//external/rust/crates/openssl",
        "//system/keymint/boringssl",
        "//system/security/prng_seeder",
    ],
    srcs: [
        "src/rust/bssl-sys/src/lib.rs",
        ":libbssl_sys_raw",
    ],
    shared_libs: [
        "libcrypto",
        "libssl",
    ],
    vendor_available: true,
    product_available: true,
}

rust_library {
    name: "libbssl_sys",
    defaults: ["libbssl_sys_defaults"],
    whole_static_libs: [
        "libbssl_rust_support",
    ],
    apex_available: [
        "//apex_available:platform",
        "com.android.virt",
    ],
    cfgs: ["unsupported_inline_wrappers"],
}

rust_library_host_rlib {
    name: "libbssl_sys_static",
    defaults: ["libbssl_sys_defaults"],
    whole_static_libs: [
        "libbssl_rust_support_static",
    ],
    cfgs: ["unsupported_inline_wrappers"],
}

genrule {
    name: "libbssl_sys_src_nostd",
    srcs: ["src/rust/bssl-sys/src/lib.rs"],
    out: ["lib.rs"],
    cmd: "(echo '#![no_std]' && cat $(in)) > $(out)",
}

rust_library_rlib {
    name: "libbssl_sys_nostd",
    crate_name: "bssl_sys",
    visibility: [
        "//packages/modules/Virtualization:__subpackages__",
    ],
    srcs: [
        ":libbssl_sys_src_nostd",
        ":libbssl_sys_raw_nostd",
    ],
    prefer_rlib: true,
    no_stdlibs: true,
    stdlibs: [
        "libcompiler_builtins.rust_sysroot",
        "libcore.rust_sysroot",
    ],
    whole_static_libs: [
        "libbssl_rust_support_baremetal",
    ],
    cfgs: ["unsupported_inline_wrappers"],
}

// High-level Rust crate `bssl-crypto`

rust_defaults {
    name: "libbssl_crypto_defaults",
    crate_name: "bssl_crypto",
    visibility: ["//visibility:public"],
    srcs: ["src/rust/bssl-crypto/src/lib.rs"],
    rustlibs: ["libbssl_sys"],
}

rust_library {
    name: "libbssl_crypto",
    defaults: ["libbssl_crypto_defaults"],
    host_supported: true,
    apex_available: [
        "//apex_available:platform",
        "com.android.virt",
    ],
    vendor_available: true,
    product_available: true,
}

rust_test {
    name: "libbssl_crypto_test",
    defaults: ["libbssl_crypto_defaults"],
    crate_name: "bssl_crypto_test",
    test_suites: ["general-tests"],
    auto_gen_config: true,
}

cc_library_headers {
    name: "trusty-libbssl-headers",
    trusty_specific: true,
    export_include_dirs: ["src/include"],
    visibility: ["//trusty/user:__subpackages__"],
}

cc_library_static {
    name: "trusty-libbssl",
    defaults: ["trusty-user-defaults"],
    srcs: [
        "src/crypto/asn1/a_bitstr.c",
        "src/crypto/asn1/a_bool.c",
        "src/crypto/asn1/a_d2i_fp.c",
        "src/crypto/asn1/a_dup.c",
        "src/crypto/asn1/a_gentm.c",
        "src/crypto/asn1/a_i2d_fp.c",
        "src/crypto/asn1/a_int.c",
        "src/crypto/asn1/a_mbstr.c",
        "src/crypto/asn1/a_object.c",
        "src/crypto/asn1/a_octet.c",
        "src/crypto/asn1/a_strex.c",
        "src/crypto/asn1/a_strnid.c",
        "src/crypto/asn1/a_time.c",
        "src/crypto/asn1/a_type.c",
        "src/crypto/asn1/a_utctm.c",
        "src/crypto/asn1/asn1_lib.c",
        "src/crypto/asn1/asn1_par.c",
        "src/crypto/asn1/asn_pack.c",
        "src/crypto/asn1/f_int.c",
        "src/crypto/asn1/f_string.c",
        "src/crypto/asn1/posix_time.c",
        "src/crypto/asn1/tasn_dec.c",
        "src/crypto/asn1/tasn_enc.c",
        "src/crypto/asn1/tasn_fre.c",
        "src/crypto/asn1/tasn_new.c",
        "src/crypto/asn1/tasn_typ.c",
        "src/crypto/asn1/tasn_utl.c",
        "src/crypto/base64/base64.c",
        "src/crypto/bio/bio.c",
        "src/crypto/bio/bio_mem.c",
        "src/crypto/bio/connect.c",
        "src/crypto/bio/errno.c",
        "src/crypto/bio/fd.c",
        "src/crypto/bio/file.c",
        "src/crypto/bio/hexdump.c",
        "src/crypto/bio/pair.c",
        "src/crypto/bio/printf.c",
        "src/crypto/bio/socket.c",
        "src/crypto/bio/socket_helper.c",
        "src/crypto/blake2/blake2.c",
        "src/crypto/bn_extra/bn_asn1.c",
        "src/crypto/bn_extra/convert.c",
        "src/crypto/buf/buf.c",
        "src/crypto/bytestring/asn1_compat.c",
        "src/crypto/bytestring/ber.c",
        "src/crypto/bytestring/cbb.c",
        "src/crypto/bytestring/cbs.c",
        "src/crypto/bytestring/unicode.c",
        "src/crypto/chacha/chacha.c",
        "src/crypto/cipher_extra/cipher_extra.c",
        "src/crypto/cipher_extra/derive_key.c",
        "src/crypto/cipher_extra/e_aesctrhmac.c",
        "src/crypto/cipher_extra/e_aesgcmsiv.c",
        "src/crypto/cipher_extra/e_chacha20poly1305.c",
        "src/crypto/cipher_extra/e_des.c",
        "src/crypto/cipher_extra/e_null.c",
        "src/crypto/cipher_extra/e_rc2.c",
        "src/crypto/cipher_extra/e_rc4.c",
        "src/crypto/cipher_extra/e_tls.c",
        "src/crypto/cipher_extra/tls_cbc.c",
        "src/crypto/conf/conf.c",
        "src/crypto/cpu_aarch64_apple.c",
        "src/crypto/cpu_aarch64_fuchsia.c",
        "src/crypto/cpu_aarch64_linux.c",
        "src/crypto/cpu_aarch64_openbsd.c",
        "src/crypto/cpu_aarch64_sysreg.c",
        "src/crypto/cpu_aarch64_win.c",
        "src/crypto/cpu_arm_freebsd.c",
        "src/crypto/cpu_arm_linux.c",
        "src/crypto/cpu_intel.c",
        "src/crypto/crypto.c",
        "src/crypto/curve25519/curve25519.c",
        "src/crypto/curve25519/curve25519_64_adx.c",
        "src/crypto/curve25519/spake25519.c",
        "src/crypto/des/des.c",
        "src/crypto/dh_extra/dh_asn1.c",
        "src/crypto/dh_extra/params.c",
        "src/crypto/digest_extra/digest_extra.c",
        "src/crypto/dilithium/dilithium.c",
        "src/crypto/dsa/dsa.c",
        "src/crypto/dsa/dsa_asn1.c",
        "src/crypto/ec_extra/ec_asn1.c",
        "src/crypto/ec_extra/ec_derive.c",
        "src/crypto/ec_extra/hash_to_curve.c",
        "src/crypto/ecdh_extra/ecdh_extra.c",
        "src/crypto/ecdsa_extra/ecdsa_asn1.c",
        "src/crypto/engine/engine.c",
        "src/crypto/err/err.c",
        "src/crypto/evp/evp.c",
        "src/crypto/evp/evp_asn1.c",
        "src/crypto/evp/evp_ctx.c",
        "src/crypto/evp/p_dh.c",
        "src/crypto/evp/p_dh_asn1.c",
        "src/crypto/evp/p_dsa_asn1.c",
        "src/crypto/evp/p_ec.c",
        "src/crypto/evp/p_ec_asn1.c",
        "src/crypto/evp/p_ed25519.c",
        "src/crypto/evp/p_ed25519_asn1.c",
        "src/crypto/evp/p_hkdf.c",
        "src/crypto/evp/p_rsa.c",
        "src/crypto/evp/p_rsa_asn1.c",
        "src/crypto/evp/p_x25519.c",
        "src/crypto/evp/p_x25519_asn1.c",
        "src/crypto/evp/pbkdf.c",
        "src/crypto/evp/print.c",
        "src/crypto/evp/scrypt.c",
        "src/crypto/evp/sign.c",
        "src/crypto/ex_data.c",
        "src/crypto/fipsmodule/bcm.c",
        "src/crypto/fipsmodule/fips_shared_support.c",
        "src/crypto/hpke/hpke.c",
        "src/crypto/hrss/hrss.c",
        "src/crypto/keccak/keccak.c",
        "src/crypto/kyber/kyber.c",
        "src/crypto/lhash/lhash.c",
        "src/crypto/mem.c",
        "src/crypto/obj/obj.c",
        "src/crypto/obj/obj_xref.c",
        "src/crypto/pem/pem_all.c",
        "src/crypto/pem/pem_info.c",
        "src/crypto/pem/pem_lib.c",
        "src/crypto/pem/pem_oth.c",
        "src/crypto/pem/pem_pk8.c",
        "src/crypto/pem/pem_pkey.c",
        "src/crypto/pem/pem_x509.c",
        "src/crypto/pem/pem_xaux.c",
        "src/crypto/pkcs7/pkcs7.c",
        "src/crypto/pkcs7/pkcs7_x509.c",
        "src/crypto/pkcs8/p5_pbev2.c",
        "src/crypto/pkcs8/pkcs8.c",
        "src/crypto/pkcs8/pkcs8_x509.c",
        "src/crypto/poly1305/poly1305.c",
        "src/crypto/poly1305/poly1305_arm.c",
        "src/crypto/poly1305/poly1305_vec.c",
        "src/crypto/pool/pool.c",
        "src/crypto/rand_extra/deterministic.c",
        "src/crypto/rand_extra/forkunsafe.c",
        "src/crypto/rand_extra/getentropy.c",
        "src/crypto/rand_extra/ios.c",
        "src/crypto/rand_extra/passive.c",
        "src/crypto/rand_extra/rand_extra.c",
        "src/crypto/rand_extra/trusty.c",
        "src/crypto/rand_extra/windows.c",
        "src/crypto/rc4/rc4.c",
        "src/crypto/refcount.c",
        "src/crypto/rsa_extra/rsa_asn1.c",
        "src/crypto/rsa_extra/rsa_crypt.c",
        "src/crypto/rsa_extra/rsa_print.c",
        "src/crypto/siphash/siphash.c",
        "src/crypto/spx/address.c",
        "src/crypto/spx/fors.c",
        "src/crypto/spx/merkle.c",
        "src/crypto/spx/spx.c",
        "src/crypto/spx/spx_util.c",
        "src/crypto/spx/thash.c",
        "src/crypto/spx/wots.c",
        "src/crypto/stack/stack.c",
        "src/crypto/thread.c",
        "src/crypto/thread_none.c",
        "src/crypto/thread_pthread.c",
        "src/crypto/thread_win.c",
        "src/crypto/trust_token/pmbtoken.c",
        "src/crypto/trust_token/trust_token.c",
        "src/crypto/trust_token/voprf.c",
        "src/crypto/x509/a_digest.c",
        "src/crypto/x509/a_sign.c",
        "src/crypto/x509/a_verify.c",
        "src/crypto/x509/algorithm.c",
        "src/crypto/x509/asn1_gen.c",
        "src/crypto/x509/by_dir.c",
        "src/crypto/x509/by_file.c",
        "src/crypto/x509/i2d_pr.c",
        "src/crypto/x509/name_print.c",
        "src/crypto/x509/policy.c",
        "src/crypto/x509/rsa_pss.c",
        "src/crypto/x509/t_crl.c",
        "src/crypto/x509/t_req.c",
        "src/crypto/x509/t_x509.c",
        "src/crypto/x509/t_x509a.c",
        "src/crypto/x509/v3_akey.c",
        "src/crypto/x509/v3_akeya.c",
        "src/crypto/x509/v3_alt.c",
        "src/crypto/x509/v3_bcons.c",
        "src/crypto/x509/v3_bitst.c",
        "src/crypto/x509/v3_conf.c",
        "src/crypto/x509/v3_cpols.c",
        "src/crypto/x509/v3_crld.c",
        "src/crypto/x509/v3_enum.c",
        "src/crypto/x509/v3_extku.c",
        "src/crypto/x509/v3_genn.c",
        "src/crypto/x509/v3_ia5.c",
        "src/crypto/x509/v3_info.c",
        "src/crypto/x509/v3_int.c",
        "src/crypto/x509/v3_lib.c",
        "src/crypto/x509/v3_ncons.c",
        "src/crypto/x509/v3_ocsp.c",
        "src/crypto/x509/v3_pcons.c",
        "src/crypto/x509/v3_pmaps.c",
        "src/crypto/x509/v3_prn.c",
        "src/crypto/x509/v3_purp.c",
        "src/crypto/x509/v3_skey.c",
        "src/crypto/x509/v3_utl.c",
        "src/crypto/x509/x509.c",
        "src/crypto/x509/x509_att.c",
        "src/crypto/x509/x509_cmp.c",
        "src/crypto/x509/x509_d2.c",
        "src/crypto/x509/x509_def.c",
        "src/crypto/x509/x509_ext.c",
        "src/crypto/x509/x509_lu.c",
        "src/crypto/x509/x509_obj.c",
        "src/crypto/x509/x509_req.c",
        "src/crypto/x509/x509_set.c",
        "src/crypto/x509/x509_trs.c",
        "src/crypto/x509/x509_txt.c",
        "src/crypto/x509/x509_v3.c",
        "src/crypto/x509/x509_vfy.c",
        "src/crypto/x509/x509_vpm.c",
        "src/crypto/x509/x509cset.c",
        "src/crypto/x509/x509name.c",
        "src/crypto/x509/x509rset.c",
        "src/crypto/x509/x509spki.c",
        "src/crypto/x509/x_algor.c",
        "src/crypto/x509/x_all.c",
        "src/crypto/x509/x_attrib.c",
        "src/crypto/x509/x_crl.c",
        "src/crypto/x509/x_exten.c",
        "src/crypto/x509/x_name.c",
        "src/crypto/x509/x_pubkey.c",
        "src/crypto/x509/x_req.c",
        "src/crypto/x509/x_sig.c",
        "src/crypto/x509/x_spki.c",
        "src/crypto/x509/x_val.c",
        "src/crypto/x509/x_x509.c",
        "src/crypto/x509/x_x509a.c",
        "src/gen/crypto/err_data.c",
        "src/crypto/curve25519/asm/x25519-asm-arm.S",
        "src/crypto/hrss/asm/poly_rq_mul.S",
        "src/crypto/poly1305/poly1305_arm_asm.S",
        "src/gen/bcm/aesni-gcm-x86_64-apple.S",
        "src/gen/bcm/aesni-gcm-x86_64-linux.S",
        "src/gen/bcm/aesni-x86-apple.S",
        "src/gen/bcm/aesni-x86-linux.S",
        "src/gen/bcm/aesni-x86_64-apple.S",
        "src/gen/bcm/aesni-x86_64-linux.S",
        "src/gen/bcm/aesv8-armv7-linux.S",
        "src/gen/bcm/aesv8-armv8-apple.S",
        "src/gen/bcm/aesv8-armv8-linux.S",
        "src/gen/bcm/aesv8-armv8-win.S",
        "src/gen/bcm/aesv8-gcm-armv8-apple.S",
        "src/gen/bcm/aesv8-gcm-armv8-linux.S",
        "src/gen/bcm/aesv8-gcm-armv8-win.S",
        "src/gen/bcm/armv4-mont-linux.S",
        "src/gen/bcm/armv8-mont-apple.S",
        "src/gen/bcm/armv8-mont-linux.S",
        "src/gen/bcm/armv8-mont-win.S",
        "src/gen/bcm/bn-586-apple.S",
        "src/gen/bcm/bn-586-linux.S",
        "src/gen/bcm/bn-armv8-apple.S",
        "src/gen/bcm/bn-armv8-linux.S",
        "src/gen/bcm/bn-armv8-win.S",
        "src/gen/bcm/bsaes-armv7-linux.S",
        "src/gen/bcm/co-586-apple.S",
        "src/gen/bcm/co-586-linux.S",
        "src/gen/bcm/ghash-armv4-linux.S",
        "src/gen/bcm/ghash-neon-armv8-apple.S",
        "src/gen/bcm/ghash-neon-armv8-linux.S",
        "src/gen/bcm/ghash-neon-armv8-win.S",
        "src/gen/bcm/ghash-ssse3-x86-apple.S",
        "src/gen/bcm/ghash-ssse3-x86-linux.S",
        "src/gen/bcm/ghash-ssse3-x86_64-apple.S",
        "src/gen/bcm/ghash-ssse3-x86_64-linux.S",
        "src/gen/bcm/ghash-x86-apple.S",
        "src/gen/bcm/ghash-x86-linux.S",
        "src/gen/bcm/ghash-x86_64-apple.S",
        "src/gen/bcm/ghash-x86_64-linux.S",
        "src/gen/bcm/ghashv8-armv7-linux.S",
        "src/gen/bcm/ghashv8-armv8-apple.S",
        "src/gen/bcm/ghashv8-armv8-linux.S",
        "src/gen/bcm/ghashv8-armv8-win.S",
        "src/gen/bcm/md5-586-apple.S",
        "src/gen/bcm/md5-586-linux.S",
        "src/gen/bcm/md5-x86_64-apple.S",
        "src/gen/bcm/md5-x86_64-linux.S",
        "src/gen/bcm/p256-armv8-asm-apple.S",
        "src/gen/bcm/p256-armv8-asm-linux.S",
        "src/gen/bcm/p256-armv8-asm-win.S",
        "src/gen/bcm/p256-x86_64-asm-apple.S",
        "src/gen/bcm/p256-x86_64-asm-linux.S",
        "src/gen/bcm/p256_beeu-armv8-asm-apple.S",
        "src/gen/bcm/p256_beeu-armv8-asm-linux.S",
        "src/gen/bcm/p256_beeu-armv8-asm-win.S",
        "src/gen/bcm/p256_beeu-x86_64-asm-apple.S",
        "src/gen/bcm/p256_beeu-x86_64-asm-linux.S",
        "src/gen/bcm/rdrand-x86_64-apple.S",
        "src/gen/bcm/rdrand-x86_64-linux.S",
        "src/gen/bcm/rsaz-avx2-apple.S",
        "src/gen/bcm/rsaz-avx2-linux.S",
        "src/gen/bcm/sha1-586-apple.S",
        "src/gen/bcm/sha1-586-linux.S",
        "src/gen/bcm/sha1-armv4-large-linux.S",
        "src/gen/bcm/sha1-armv8-apple.S",
        "src/gen/bcm/sha1-armv8-linux.S",
        "src/gen/bcm/sha1-armv8-win.S",
        "src/gen/bcm/sha1-x86_64-apple.S",
        "src/gen/bcm/sha1-x86_64-linux.S",
        "src/gen/bcm/sha256-586-apple.S",
        "src/gen/bcm/sha256-586-linux.S",
        "src/gen/bcm/sha256-armv4-linux.S",
        "src/gen/bcm/sha256-armv8-apple.S",
        "src/gen/bcm/sha256-armv8-linux.S",
        "src/gen/bcm/sha256-armv8-win.S",
        "src/gen/bcm/sha256-x86_64-apple.S",
        "src/gen/bcm/sha256-x86_64-linux.S",
        "src/gen/bcm/sha512-586-apple.S",
        "src/gen/bcm/sha512-586-linux.S",
        "src/gen/bcm/sha512-armv4-linux.S",
        "src/gen/bcm/sha512-armv8-apple.S",
        "src/gen/bcm/sha512-armv8-linux.S",
        "src/gen/bcm/sha512-armv8-win.S",
        "src/gen/bcm/sha512-x86_64-apple.S",
        "src/gen/bcm/sha512-x86_64-linux.S",
        "src/gen/bcm/vpaes-armv7-linux.S",
        "src/gen/bcm/vpaes-armv8-apple.S",
        "src/gen/bcm/vpaes-armv8-linux.S",
        "src/gen/bcm/vpaes-armv8-win.S",
        "src/gen/bcm/vpaes-x86-apple.S",
        "src/gen/bcm/vpaes-x86-linux.S",
        "src/gen/bcm/vpaes-x86_64-apple.S",
        "src/gen/bcm/vpaes-x86_64-linux.S",
        "src/gen/bcm/x86-mont-apple.S",
        "src/gen/bcm/x86-mont-linux.S",
        "src/gen/bcm/x86_64-mont-apple.S",
        "src/gen/bcm/x86_64-mont-linux.S",
        "src/gen/bcm/x86_64-mont5-apple.S",
        "src/gen/bcm/x86_64-mont5-linux.S",
        "src/gen/crypto/aes128gcmsiv-x86_64-apple.S",
        "src/gen/crypto/aes128gcmsiv-x86_64-linux.S",
        "src/gen/crypto/chacha-armv4-linux.S",
        "src/gen/crypto/chacha-armv8-apple.S",
        "src/gen/crypto/chacha-armv8-linux.S",
        "src/gen/crypto/chacha-armv8-win.S",
        "src/gen/crypto/chacha-x86-apple.S",
        "src/gen/crypto/chacha-x86-linux.S",
        "src/gen/crypto/chacha-x86_64-apple.S",
        "src/gen/crypto/chacha-x86_64-linux.S",
        "src/gen/crypto/chacha20_poly1305_armv8-apple.S",
        "src/gen/crypto/chacha20_poly1305_armv8-linux.S",
        "src/gen/crypto/chacha20_poly1305_armv8-win.S",
        "src/gen/crypto/chacha20_poly1305_x86_64-apple.S",
        "src/gen/crypto/chacha20_poly1305_x86_64-linux.S",
        "src/gen/test_support/trampoline-armv4-linux.S",
        "src/gen/test_support/trampoline-armv8-apple.S",
        "src/gen/test_support/trampoline-armv8-linux.S",
        "src/gen/test_support/trampoline-armv8-win.S",
        "src/gen/test_support/trampoline-x86-apple.S",
        "src/gen/test_support/trampoline-x86-linux.S",
        "src/gen/test_support/trampoline-x86_64-apple.S",
        "src/gen/test_support/trampoline-x86_64-linux.S",
        "src/third_party/fiat/asm/fiat_curve25519_adx_mul.S",
        "src/third_party/fiat/asm/fiat_curve25519_adx_square.S",
        "src/third_party/fiat/asm/fiat_p256_adx_mul.S",
        "src/third_party/fiat/asm/fiat_p256_adx_sqr.S",
    ],
    local_include_dirs: ["src/crypto"],
    header_libs: ["trusty-libbssl-headers"],
    export_header_lib_headers: ["trusty-libbssl-headers"],
    static_libs: ["trusty-user-base-lib-rng"],
    cflags: [
        "-D__STDC_NO_ATOMICS__",
        "-DOPENSSL_STATIC_ARMCAP",
        "-Wno-unused-parameter",
        "-DBORINGSSL_ANDROID_SYSTEM",
    ],
    asflags: [
        "-DOPENSSL_STATIC_ARMCAP",
        "-Wno-unused-parameter",
    ],
    visibility: [
        "//trusty/user:__subpackages__",
        "//external/open-dice",
    ],
}
